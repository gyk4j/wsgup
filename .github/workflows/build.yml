name: CI build

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
    runs-on: ubuntu-latest
    env:
      Configuration: Release
    
    steps:
      - name: Prepare upload artifact
        id: prepare-upload-artifact
        run: mkdir -p /tmp/upload
      
      - name: Cache cjson
        id: cache-cjson
        uses: actions/cache@v4
        env:
          cache-name: cache-cjson
        with:
          path: /tmp/cjson
          key: ${{ runner.os }}-build-${{ env.cache-name }}
        
      - if: ${{ steps.cache-cjson.outputs.cache-hit != 'true' }}
        name: Download cJSON
        uses: actions/checkout@v4
        with:
          github-server-url: 'https://github.com'
          repository: 'DaveGamble/cJSON'
          sparse-checkout: |
            cJSON.c
            cJSON.h
        continue-on-error: false
      
      - if: ${{ steps.cache-cjson.outputs.cache-hit != 'true' }}
        name: Check dependencies
        run: |
          mkdir /tmp/cjson
          cp cJSON.* /tmp/cjson
        
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Build C
        run: |
          cd $GITHUB_WORKSPACE/c/wsgup
          cp /tmp/cjson/cJSON.c src/
          cp /tmp/cjson/cJSON.h include/
          cmake -B build .
          cmake --build build
          mkdir -p /tmp/upload/c
          cp build/wsgup /tmp/upload/c
        env:
          Configuration: ${{ matrix.configuration }}
          
      - name: "Build C#"
        run: |
          cd $GITHUB_WORKSPACE/csharp/wsgup
          dotnet build -c Release
          dotnet build-server shutdown
          mkdir -p /tmp/upload/csharp
          cp bin/Release/netcoreapp3.0/wsgup.dll /tmp/upload/csharp 
          cp bin/Release/netcoreapp3.0/wsgup /tmp/upload/csharp
          
      - name: "Build Go"
        run: |
          cd $GITHUB_WORKSPACE/go/wsgup
          go build -ldflags "-s -w"
          mkdir -p /tmp/upload/go
          cp wsgup /tmp/upload/go
          
      - name: "Cache Gradle 8.9 wrapper"
        id: cache-gradlew
        uses: actions/cache@v4
        env:
          cache-name: cache-gradlew-v8.9
        with:
          path: /home/runner/.gradle
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          
      - name: "Build Java"
        run: |
          cd $GITHUB_WORKSPACE/java/wsgup
          chmod a+x gradlew
          ./gradlew build --no-daemon --console=plain
          mkdir -p /tmp/upload/java
          tar -xvzf app/build/distributions/app.tar.gz -C /tmp/upload/java
          
      - name: "Build JavaScript/Node.js"
        run: |
          cd $GITHUB_WORKSPACE/js/wsgup
          mkdir -p /tmp/upload/js
          cp app.js /tmp/upload/js
          cp package.json /tmp/upload/js
          
      - name: "Build Kotlin"
        run: |
          cd $GITHUB_WORKSPACE/kotlin/wsgup
          chmod a+x gradlew
          ./gradlew build --no-daemon --console=plain
          mkdir -p /tmp/upload/kotlin
          tar -xvzf wsgup/build/distributions/wsgup.tar.gz -C /tmp/upload/kotlin
          
      - name: "Build Perl"
        run: |
          cd $GITHUB_WORKSPACE/perl/wsgup
          mkdir -p /tmp/upload/perl
          cp main.pl /tmp/upload/perl
          cp cpanfile /tmp/upload/perl
          
      - name: "Build PHP"
        run: |
          cd $GITHUB_WORKSPACE/php/wsgup
          mkdir -p /tmp/upload/php
          cp index.php /tmp/upload/php
          
      - name: "Build Python"
        run: |
          cd $GITHUB_WORKSPACE/python/wsgup
          mkdir -p /tmp/upload/python
          cp main.py /tmp/upload/python
          cp requirements.txt /tmp/upload/python
          
      - name: "Build Ruby"
        run: |
          cd $GITHUB_WORKSPACE/ruby/wsgup
          mkdir -p /tmp/upload/ruby
          cp main.rb /tmp/upload/ruby
          
      - name: "Build Rust"
        run: |
          cd $GITHUB_WORKSPACE/rust/wsgup
          mkdir -p /tmp/upload/rust
          cargo build --release
          cp target/release/wsgup /tmp/upload/rust
          
      - name: "Build Visual Basic.NET"
        run: |
          cd $GITHUB_WORKSPACE/vb/wsgup
          dotnet build -c Release
          dotnet build-server shutdown
          mkdir -p /tmp/upload/vb
          cp bin/Release/netcoreapp3.0/wsgup.dll /tmp/upload/vb 
          cp bin/Release/netcoreapp3.0/wsgup /tmp/upload/vb
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wreck-${{ github.sha }}
          path: /tmp/upload
          if-no-files-found: error
          retention-days: 1
    