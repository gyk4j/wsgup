name: CI build

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      Configuration: Release
    
    steps:
      - name: "Cache Dart"
        id: cache-dart
        uses: actions/cache@v4
        env:
          cache-name: cache-dart
        with:
          path: /tmp/dart
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      
      - if: ${{ steps.cache-dart.outputs.cache-hit != 'true' }}
        name: "Download Dart"
        run: |
          mkdir /tmp/dart
          wget -nv -P /tmp/dart https://storage.googleapis.com/dart-archive/channels/stable/release/latest/linux_packages/dart_3.4.4-1_amd64.deb
        
      - name: "Install Dart"
        id: install-dart
        run: |
          sudo dpkg -i /tmp/dart/dart_3.4.4-1_amd64.deb
          dart --version
        
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Prepare upload artifact
        id: prepare-upload-artifact
        run: |
          mkdir -p /tmp/upload
          cp LICENSE /tmp/upload
          cp README.md /tmp/upload
          cd $GITHUB_WORKSPACE/shared
          mv register.json.tmpl register.json
          mv testdata.json.tmpl testdata.json
          mkdir -p /tmp/upload/shared
          cp register.json /tmp/upload/shared
          cp testdata.json /tmp/upload/shared
          mkdir -p /tmp/upload/bin
          
      - name: "Cache CMake"
        id: cache-cmake
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake
        with:
          path: ${{ github.workspace }}/c/wsgup/build
          key: ${{ runner.os }}-build-${{ env.cache-name }}
        
      - name: Build C
        run: |
          cd $GITHUB_WORKSPACE/c/wsgup
          cmake -B build .
          cmake --build build
          mkdir -p /tmp/upload/bin/c
          cp ../README.md /tmp/upload/bin/c 
          cp build/wsgup /tmp/upload/bin/c
          
      - name: "Build C#"
        run: |
          cd $GITHUB_WORKSPACE/csharp/wsgup
          dotnet build -c Release
          dotnet build-server shutdown
          mkdir -p /tmp/upload/bin/csharp
          cp ../README.md /tmp/upload/bin/csharp
          cp bin/Release/netcoreapp3.0/* /tmp/upload/bin/csharp
          
      - name: "Build Dart"
        run: |
          cd $GITHUB_WORKSPACE/dart/wsgup
          mkdir -p /tmp/upload/bin/dart
          dart pub get
          dart compile exe bin/wsgup.dart -o /tmp/upload/bin/dart/wsgup
          dart compile aot-snapshot bin/wsgup.dart -o /tmp/upload/bin/dart/wsgup.aot
          dart compile jit-snapshot bin/wsgup.dart -o /tmp/upload/bin/dart/wsgup.jit
          dart compile js bin/wsgup.dart -o /tmp/upload/bin/dart/wsgup.js
          
      - name: "Build Go"
        run: |
          cd $GITHUB_WORKSPACE/go/wsgup
          go build -ldflags "-s -w"
          mkdir -p /tmp/upload/bin/go
          cp ../README.md /tmp/upload/bin/go 
          cp wsgup /tmp/upload/bin/go
          
      - name: "Cache Gradle 8.9 wrapper"
        id: cache-gradlew
        uses: actions/cache@v4
        env:
          cache-name: cache-gradlew-v8.9
        with:
          path: /home/runner/.gradle
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          
      - name: "Build Java"
        run: |
          cd $GITHUB_WORKSPACE/java/wsgup
          chmod a+x gradlew
          ./gradlew build --no-daemon --console=plain
          mkdir -p /tmp/upload/bin/java
          cp ../README.md /tmp/upload/bin/java
          cp wsgup/build/libs/* /tmp/upload/bin/java
        # tar -xvf app/build/distributions/app.tar -C /tmp/upload/bin/java --strip-components=1
          
      - name: "Build JavaScript/Node.js"
        run: |
          cd $GITHUB_WORKSPACE/js/wsgup
          mkdir -p /tmp/upload/bin/js
          cp ../README.md /tmp/upload/bin/js
          cp * /tmp/upload/bin/js
          
      - name: "Build Kotlin"
        run: |
          cd $GITHUB_WORKSPACE/kotlin/wsgup
          chmod a+x gradlew
          ./gradlew build --no-daemon --console=plain
          mkdir -p /tmp/upload/bin/kotlin
          cp ../README.md /tmp/upload/bin/kotlin
          cp wsgup/build/libs/* /tmp/upload/bin/kotlin
        # tar -xvf wsgup/build/distributions/wsgup.tar -C /tmp/upload/bin/kotlin --strip-components=1
          
      - name: "Build Perl"
        run: |
          cd $GITHUB_WORKSPACE/perl/wsgup
          mkdir -p /tmp/upload/bin/perl
          cp ../README.md /tmp/upload/bin/perl
          cp * /tmp/upload/bin/perl
          
      - name: "Build PHP"
        run: |
          cd $GITHUB_WORKSPACE/php/wsgup
          mkdir -p /tmp/upload/bin/php
          cp ../README.md /tmp/upload/bin/php
          cp * /tmp/upload/bin/php
          
      - name: "Build Python"
        run: |
          cd $GITHUB_WORKSPACE/python/wsgup
          mkdir -p /tmp/upload/bin/python
          cp ../README.md /tmp/upload/bin/python
          cp * /tmp/upload/bin/python
          
      - name: "Build Ruby"
        run: |
          cd $GITHUB_WORKSPACE/ruby/wsgup
          mkdir -p /tmp/upload/bin/ruby
          cp ../README.md /tmp/upload/bin/ruby
          cp * /tmp/upload/bin/ruby
          
      - name: "Build Rust"
        run: |
          cd $GITHUB_WORKSPACE/rust/wsgup
          mkdir -p /tmp/upload/bin/rust
          cp ../README.md /tmp/upload/bin/rust
          cargo build --release
          cp -r target/release/* /tmp/upload/bin/rust
          
      - name: "Build Swift"
        run: |
          cd $GITHUB_WORKSPACE/swift/wsgup
          mkdir -p /tmp/upload/bin/swift
          cp ../README.md /tmp/upload/bin/swift
          swift build -c release
          cp -r .build/x86_64-unknown-linux-gnu/release/* /tmp/upload/bin/swift
          
      - name: "Build Visual Basic.NET"
        run: |
          cd $GITHUB_WORKSPACE/vb/wsgup
          dotnet build -c Release
          dotnet build-server shutdown
          mkdir -p /tmp/upload/bin/vb
          cp ../README.md /tmp/upload/bin/vb
          cp bin/Release/netcoreapp3.0/* /tmp/upload/bin/vb 
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: wreck-${{ runner.os }}-${{ github.sha }}
          path: /tmp/upload
          if-no-files-found: error
          retention-days: 1
    